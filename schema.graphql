# Any type implementing Private interface can only queried and updated by self or admin
interface Private @auth(
    query: {
        or: [
        { rule: "{ $role: { eq: \"ADMIN\"} }" }
        { rule: "query($username: String!) { queryPrivate { belongsTo(filter: { username: { eq: $username } }) { username } } }" }
      ]
    },
    add: { rule:  "{$isAuthenticated: { eq: \"true\" } }" },
    update: {
      or: [
        { rule: "{ $role: { eq: \"ADMIN\"} }" }
        { rule: "query($username: String!)  { queryPrivate { belongsTo(filter: { username: { eq: $username } }) { username } } }" }
      ]
    },
    delete: {
      or: [
        { rule: "{ $role: { eq: \"ADMIN\"} }" }
        { rule: "query($username: String!)  { queryPrivate { belongsTo(filter: { username: { eq: $username } }) { username } } }" }
      ]
    }
  ) {
    id: ID!
    belongsTo: User!
    createdAt: DateTime! 
    updatedAt: DateTime! 
}

interface Protected @auth(
  query: { rule:  "{$isAuthenticated: { eq: \"true\" } }" },
  add: { rule:  "{$isAuthenticated: { eq: \"true\" } }" },
  update: {
    or: [
      { rule: "{ $role: { eq: \"ADMIN\"} }" }
      { rule: "query($username: String!)  { queryProtected { createdBy(filter: { username: { eq: $username } }) { username } } }" }
    ]
  },
  delete: {
    or: [
      { rule: "{ $role: { eq: \"ADMIN\"} }" }
      { rule: "query($username: String!)  { queryProtected { createdBy(filter: { username: { eq: $username } }) { username } } }" }
    ]
  }
) {
  id: ID!
  createdBy: User!
  createdAt: DateTime! 
  updatedAt: DateTime!
}

interface Public {
  id: ID!
  createdAt: DateTime!
  updatedAT: DateTime!
}

type User implements Public
  @secret(field: "password")
  @auth(
    update: {
      or: [
        { rule: "{ $role: { eq: \"ADMIN\"} }" }
        { rule: "query($username: String!) { queryUser(filter: { username: { eq: $username } }) { username } }" }
      ]
    },
    delete: {
      or: [
        { rule: "{ $role: { eq: \"ADMIN\"} }" }
        { rule: "query($username: String!) { queryUser(filter: { username: { eq: $username } }) { username } }" }
      ]
    }
  )
{
  id: ID!
  username: String! @id
  isType: UserType! @search
  phone: Phone @hasInverse(field: belongsTo)
  teams: [Team] @hasInverse(field: createdBy)
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Phone implements Private
{
  id: ID!
  number: String!
  belongsTo: User! 
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Team implements Protected {
  id: ID!
  name: String!
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Post implements Public {
  id: ID!
  title: String!
  content: String!
  createdBy: User!
  createdAt: DateTime!
  updatedAT: DateTime!
}

enum UserType {
  USER
  ADMIN
}

# Dgraph.Authorization {"JWKUrl":"http://dgauth.default.svc/jwks","VerificationKey":"","Header":"DAuth", "Namespace":"https://dgraph.io/jwt/claims","Algo":"","Audience":["dgraph-io"]}
